name: Python
on:
  workflow_dispatch:
    inputs:
      build:
        required: true
        type: number
jobs:
  bdist_wheel-macos-x64:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, macos-12]
        ver: ['3.7', '3.8', '3.9', '3.10']
    env:
      BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BAZEL_CXXOPTS: '-std=c++14'
      BAZEL_USE_CPP_ONLY_TOOLCHAIN: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.ver }}
      - name: Prepare Python ${{ matrix.ver }} environment
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel delocate
        shell: bash
      - name: python setup.py bdist_wheel
        run: |
          python setup.py bdist_wheel
          python -m delocate.cmd.delocate_wheel --wheel-dir=. dist/*
        shell: bash
        working-directory: python
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ hashFiles('python/google_re2-*.whl') }}
          path: python/google_re2-*.whl
  bdist_wheel-linux-x64:
    runs-on: ubuntu-latest
    container: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['quay.io/pypa/manylinux2014_x86_64', 'quay.io/pypa/manylinux_2_28_x86_64']
        ver: ['3.7', '3.8', '3.9', '3.10']
    env:
      BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BAZEL_CXXOPTS: '-std=c++14'
      BAZEL_USE_CPP_ONLY_TOOLCHAIN: 1
    steps:
      - uses: actions/checkout@v3
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Prepare Python ${{ matrix.ver }} environment
        run: |
          ln -sf /usr/local/bin/python${{ matrix.ver }} /usr/local/bin/python
          ln -sf /usr/local/bin/python${{ matrix.ver }} /usr/local/bin/python3
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel auditwheel
        shell: bash
      - name: python setup.py bdist_wheel
        run: |
          python setup.py bdist_wheel
          python -m auditwheel repair --wheel-dir=. dist/*
        shell: bash
        working-directory: python
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ hashFiles('python/google_re2-*.whl) }}
          path: python/google_re2-*.whl
  bdist_wheel-linux-arm64:
    runs-on: [self-hosted, linux, arm64]
    container: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['quay.io/pypa/manylinux2014_aarch64', 'quay.io/pypa/manylinux_2_28_aarch64']
        ver: ['3.7', '3.8', '3.9', '3.10']
    env:
      BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BAZEL_CXXOPTS: '-std=c++14'
      BAZEL_USE_CPP_ONLY_TOOLCHAIN: 1
    steps:
      - uses: actions/checkout@v3
      - uses: bazelbuild/setup-bazelisk@v2
      - name: Prepare Python ${{ matrix.ver }} environment
        run: |
          ln -sf /usr/local/bin/python${{ matrix.ver }} /usr/local/bin/python
          ln -sf /usr/local/bin/python${{ matrix.ver }} /usr/local/bin/python3
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel auditwheel
        shell: bash
      - name: python setup.py bdist_wheel
        run: |
          python setup.py bdist_wheel
          python -m auditwheel repair --wheel-dir=. dist/*
        shell: bash
        working-directory: python
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ hashFiles('python/google_re2-*.whl') }}
          path: python/google_re2-*.whl
  publish:
    needs:
      - bdist_wheel-macos-x64
      - bdist_wheel-linux-x64
      - bdist_wheel-linux-arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Prepare Python 3.x environment
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel
        shell: bash
      - if: ${{ inputs.build }} == 1
        name: python setup.py sdist
        run: |
          sed -i -E \
            -e 's/absl\/strings\/string_view\.h/re2\/stringpiece.h/' \
            -e 's/absl::string_view/re2::StringPiece/' \
            -e 's/std::make_unique<([^>]+)>\(([^)]+)\)/std::unique_ptr<\1>(new \1(\2))/' \
            _re2.cc
          python setup.py sdist
        shell: bash
        working-directory: python
      - uses: actions/download-artifact@v3
        with:
          path: python
      - name: Set build number to ${{ inputs.build }}
        run: |
          mkdir -p dist
          for WHL in */google_re2-*.whl; do
            python -m wheel unpack ${WHL}
            python -m wheel pack --dest-dir=dist --build-number=${{ inputs.build }} google_re2-*
            rm -rf google_re2-*
          done
          ls -l dist/*
        shell: bash
        working-directory: python
