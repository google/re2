# Copyright 2009 The RE2 Authors.  All Rights Reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

.PHONY: all
all: .libraries

OUT=obj

# to build against PCRE for testing or benchmarking,
# uncomment the next two lines
# CCPCRE=-I/usr/local/include -DUSEPCRE
# LDPCRE=-L/usr/local/lib -lpcre

CXX?=g++
CXXFLAGS?=-Wall -O3 -g -pthread # can override
RE2_CXXFLAGS?=-Wsign-compare -c -I. $(CCPCRE)  # required
LDFLAGS?=-pthread
AR?=ar
ARFLAGS?=rsc
NM?=nm
NMFLAGS?=-p

# Variables mandated by GNU, the arbiter of all good taste on the internet.
# http://www.gnu.org/prep/standards/standards.html
prefix=/usr/local
exec_prefix=$(prefix)
bindir=$(exec_prefix)/bin
includedir=$(prefix)/include
libdir=$(exec_prefix)/lib
INSTALL=install
INSTALL_PROGRAM=$(INSTALL)
INSTALL_DATA=$(INSTALL) -m 644

# ABI version
# http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
SONAME=0

# To rebuild the Tables generated by Perl and Python scripts (requires Internet
# access for Unicode data), uncomment the following line:
# REBUILD_TABLES=1

ifeq ($(shell uname),Darwin)
MAKE_SHARED_LIBRARY=$(CXX) -dynamiclib $(LDFLAGS) -exported_symbols_list libre2.symbols.darwin
else ifeq ($(shell uname),SunOS)
MAKE_SHARED_LIBRARY=$(CXX) -shared -Wl,-soname,libre2.so.$(SONAME),-M,libre2.symbols $(LDFLAGS)
else
MAKE_SHARED_LIBRARY=$(CXX) -shared -Wl,-soname,libre2.so.$(SONAME),--version-script,libre2.symbols $(LDFLAGS)
endif

INSTALL_HFILES=\
	re2/filtered_re2.h\
	re2/re2.h\
	re2/set.h\
	re2/stringpiece.h\
	re2/variadic_function.h\

HFILES=\
	util/atomicops.h\
	util/benchmark.h\
	util/flags.h\
	util/logging.h\
	util/mutex.h\
	util/pcre.h\
	util/random.h\
	util/sparse_array.h\
	util/sparse_set.h\
	util/test.h\
	util/thread.h\
	util/utf.h\
	util/util.h\
	util/valgrind.h\
	re2/filtered_re2.h\
	re2/prefilter.h\
	re2/prefilter_tree.h\
	re2/prog.h\
	re2/re2.h\
	re2/regexp.h\
	re2/set.h\
	re2/stringpiece.h\
	re2/testing/exhaustive_tester.h\
	re2/testing/regexp_generator.h\
	re2/testing/string_generator.h\
	re2/testing/tester.h\
	re2/unicode_casefold.h\
	re2/unicode_groups.h\
	re2/variadic_function.h\
	re2/walker-inl.h\

OFILES=\
	util/hash.o\
	util/rune.o\
	util/stringprintf.o\
	util/strutil.o\
	util/valgrind.o\
	re2/bitstate.o\
	re2/compile.o\
	re2/dfa.o\
	re2/filtered_re2.o\
	re2/mimics_pcre.o\
	re2/nfa.o\
	re2/onepass.o\
	re2/parse.o\
	re2/perl_groups.o\
	re2/prefilter.o\
	re2/prefilter_tree.o\
	re2/prog.o\
	re2/re2.o\
	re2/regexp.o\
	re2/set.o\
	re2/simplify.o\
	re2/stringpiece.o\
	re2/tostring.o\
	re2/unicode_casefold.o\
	re2/unicode_groups.o\

OFILES:=$(addprefix $(OUT)/,$(OFILES))

TESTOFILES=\
	util/pcre.o\
	util/random.o\
	util/thread.o\
	re2/testing/backtrack.o\
	re2/testing/dump.o\
	re2/testing/exhaustive_tester.o\
	re2/testing/null_walker.o\
	re2/testing/regexp_generator.o\
	re2/testing/string_generator.o\
	re2/testing/tester.o\

TESTOFILES:=$(addprefix $(OUT)/,$(TESTOFILES))

TESTS=\
	charclass_test\
	compile_test\
	filtered_re2_test\
	mimics_pcre_test\
	parse_test\
	possible_match_test\
	re2_test\
	re2_arg_test\
	regexp_test\
	required_prefix_test\
	search_test\
	set_test\
	simplify_test\
	string_generator_test\

TESTS:=$(addprefix $(OUT)/test/,$(TESTS))

BIGTESTS=\
	dfa_test\
	exhaustive1_test\
	exhaustive2_test\
	exhaustive3_test\
	exhaustive_test\
	random_test\

BIGTESTS:=$(addprefix $(OUT)/test/,$(BIGTESTS))

SOFILES=$(patsubst $(OUT)/%,$(OUT)/so/%,$(OFILES))
STESTOFILES=$(patsubst $(OUT)/%,$(OUT)/so/%,$(TESTOFILES))
STESTS=$(patsubst $(OUT)/%,$(OUT)/so/%,$(TESTS))
SBIGTESTS=$(patsubst $(OUT)/%,$(OUT)/so/%,$(BIGTESTS))

DOFILES=$(patsubst $(OUT)/%,$(OUT)/dbg/%,$(OFILES))
DTESTOFILES=$(patsubst $(OUT)/%,$(OUT)/dbg/%,$(TESTOFILES))
DTESTS=$(patsubst $(OUT)/%,$(OUT)/dbg/%,$(TESTS))
DBIGTESTS=$(patsubst $(OUT)/%,$(OUT)/dbg/%,$(BIGTESTS))

.libraries: $(OUT)/libre2.a $(OUT)/so/libre2.so
	@touch $@

$(OUT)/%.o: %.cc $(HFILES)
	@mkdir -p $$(dirname $@)
	$(CXX) -o $@ $(CPPFLAGS) $(CXXFLAGS) $(RE2_CXXFLAGS) -DNDEBUG $*.cc

$(OUT)/dbg/%.o: %.cc $(HFILES)
	@mkdir -p $$(dirname $@)
	$(CXX) -o $@ -fPIC $(CPPFLAGS) $(CXXFLAGS) $(RE2_CXXFLAGS) $*.cc

$(OUT)/so/%.o: %.cc $(HFILES)
	@mkdir -p $$(dirname $@)
	$(CXX) -o $@ -fPIC $(CPPFLAGS) $(CXXFLAGS) $(RE2_CXXFLAGS) -DNDEBUG $*.cc

$(OUT)/libre2.a: $(OFILES)
	$(AR) $(ARFLAGS) $@ $(OFILES)

$(OUT)/dbg/libre2.a: $(DOFILES)
	$(AR) $(ARFLAGS) $@ $(DOFILES)

$(OUT)/so/libre2.so: $(SOFILES)
	$(MAKE_SHARED_LIBRARY) -o $@.$(SONAME) $(SOFILES)
	ln -sf libre2.so.$(SONAME) $@

$(OUT)/test/%: $(OUT)/re2/testing/%.o \
               $(TESTOFILES) $(OUT)/util/test.o \
               $(OUT)/libre2.a
	@mkdir -p $(OUT)/test
	$(CXX) -o $@ $^ $(LDFLAGS) $(LDPCRE)

$(OUT)/dbg/test/%: $(OUT)/dbg/re2/testing/%.o \
                   $(DTESTOFILES) $(OUT)/dbg/util/test.o \
                   $(OUT)/dbg/libre2.a
	@mkdir -p $(OUT)/dbg/test
	$(CXX) -o $@ $^ $(LDFLAGS) $(LDPCRE)

$(OUT)/so/test/%: $(OUT)/so/re2/testing/%.o \
                  $(DTESTOFILES) $(OUT)/so/util/test.o \
                  $(OUT)/so/libre2.so $(OUT)/libre2.a
	@mkdir -p $(OUT)/so/test
	$(CXX) -o $@ $(filter-out $(OUT)/so/libre2.so,$^) \
	       -L$(OUT)/so -lre2 $(LDFLAGS) $(LDPCRE)

$(OUT)/test/regexp_benchmark: $(OUT)/re2/testing/regexp_benchmark.o \
                              $(TESTOFILES) $(OUT)/util/benchmark.o \
                              $(OUT)/libre2.a
	@mkdir -p $(OUT)/test
	$(CXX) -o $@ $^ $(LDFLAGS) $(LDPCRE)

ifdef REBUILD_TABLES
re2/perl_groups.cc: re2/make_perl_groups.pl
	perl $< > $@

re2/unicode_%.cc: re2/make_unicode_%.py
	python $< > $@

.PRECIOUS: re2/perl_groups.cc re2/unicode_casefold.cc re2/unicode_groups.cc
endif

distclean: clean
	rm -f re2/perl_groups.cc re2/unicode_casefold.cc re2/unicode_groups.cc

clean:
	rm -rf $(OUT)
	rm -f .libraries
	rm -f re2/*.pyc

testofiles: $(TESTOFILES)

test: $(DTESTS) $(TESTS) $(STESTS) debug-test static-test shared-test

debug-test: $(DTESTS)
	@echo
	@echo Running debug binary tests.
	@echo
	@./runtests $(DTESTS)

static-test: $(TESTS)
	@echo
	@echo Running static binary tests.
	@echo
	@./runtests $(TESTS)

shared-test: $(STESTS)
	@echo
	@echo Running dynamic binary tests.
	@echo
	@LD_LIBRARY_PATH=$(OUT)/so:$(LD_LIBRARY_PATH) ./runtests $(STESTS)

debug-bigtest: $(DTESTS) $(DBIGTESTS)
	@./runtests $(DTESTS) $(DBIGTESTS)

static-bigtest: $(TESTS) $(BIGTESTS)
	@./runtests $(TESTS) $(BIGTESTS)

shared-bigtest: $(STESTS) $(SBIGTESTS)
	@LD_LIBRARY_PATH=$(OUT)/so:$(LD_LIBRARY_PATH) ./runtests $(STESTS) $(SBIGTESTS)

benchmark: $(OUT)/test/regexp_benchmark

install: $(OUT)/libre2.a $(OUT)/so/libre2.so
	mkdir -p $(DESTDIR)$(includedir)/re2 $(DESTDIR)$(libdir)/pkgconfig
	$(INSTALL_DATA) $(INSTALL_HFILES) $(DESTDIR)$(includedir)/re2
	$(INSTALL) $(OUT)/libre2.a $(DESTDIR)$(libdir)/libre2.a
	$(INSTALL) $(OUT)/so/libre2.so $(DESTDIR)$(libdir)/libre2.so.$(SONAME).0.0
	ln -sf libre2.so.$(SONAME).0.0 $(DESTDIR)$(libdir)/libre2.so.$(SONAME)
	ln -sf libre2.so.$(SONAME).0.0 $(DESTDIR)$(libdir)/libre2.so
	sed -e "s#@prefix@#${prefix}#" re2.pc >$(DESTDIR)$(libdir)/pkgconfig/re2.pc

testinstall:
	@mkdir -p $(OUT)
	cp testinstall.cc $(OUT)
ifneq ($(shell uname),Darwin)
	(cd $(OUT) && $(CXX) -I$(DESTDIR)$(includedir) -L$(DESTDIR)$(libdir) testinstall.cc -lre2 -pthread -static -o testinstall)
	$(OUT)/testinstall
endif
	(cd $(OUT) && $(CXX) -I$(DESTDIR)$(includedir) -L$(DESTDIR)$(libdir) testinstall.cc -lre2 -pthread -o testinstall)
	LD_LIBRARY_PATH=$(DESTDIR)$(libdir) $(OUT)/testinstall

benchlog: $(OUT)/test/regexp_benchmark
	(echo '==BENCHMARK==' `hostname` `date`; \
	  (uname -a; $(CXX) --version; git rev-parse --short HEAD; file $<) | sed 's/^/# /'; \
	  echo; \
	  $< 'PCRE|RE2') | tee -a benchlog.$$(hostname | sed 's/\..*//')

# Keep gmake from deleting intermediate files it creates.
# This makes repeated builds faster and preserves debug info on OS X.

.PRECIOUS: $(OUT)/%.o $(OUT)/dbg/%.o $(OUT)/so/%.o $(OUT)/libre2.a \
	$(OUT)/dbg/libre2.a $(OUT)/so/libre2.a \
	$(OUT)/test/% $(OUT)/so/test/% $(OUT)/dbg/test/%

log:
	make clean
	make CXXFLAGS="$(CXXFLAGS) -DLOGGING=1" $(OUT)/test/exhaustive{,1,2,3}_test
	echo '#' RE2 exhaustive tests built by make log >re2-exhaustive.txt
	echo '#' $$(date) >>re2-exhaustive.txt
	$(OUT)/test/exhaustive_test |grep -v '^PASS$$' >>re2-exhaustive.txt
	$(OUT)/test/exhaustive1_test |grep -v '^PASS$$' >>re2-exhaustive.txt
	$(OUT)/test/exhaustive2_test |grep -v '^PASS$$' >>re2-exhaustive.txt
	$(OUT)/test/exhaustive3_test |grep -v '^PASS$$' >>re2-exhaustive.txt

	make CXXFLAGS="$(CXXFLAGS) -DLOGGING=1" $(OUT)/test/search_test
	echo '#' RE2 basic search tests built by make $@ >re2-search.txt
	echo '#' $$(date) >>re2-search.txt
	$(OUT)/test/search_test |grep -v '^PASS$$' >>re2-search.txt

x: x.cc $(OUT)/libre2.a
	g++ -I. -o x x.cc $(OUT)/libre2.a
