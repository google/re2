{
  "comments": [
    {
      "key": {
        "uuid": "f465d6c4_955b537d",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T00:02:50Z",
      "side": 1,
      "message": "Based on a prior discussion, Chandler C. doesn\u0027t like this.  And he\u0027s technically clearly correct.  This is not guaranteed to be safe in the presence of type-based alias analysis.  You are modifying a T through a pointer to atomic\u003cT\u003e, which is a different type.\n\nThat said, we also do this in Android.\n\nIn this context, I would probably prefer the intrinsics below, and only use this as a fallback. Copying Chandler on this CL is probably also a good idea.\n\nBoth seem a bit dangerous in that they don\u0027t check that T is sufficiently aligned for atomic\u003cT\u003e.  I believe this is commonly false for double or long long with 32-bit ABIs.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 48
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "314ea0ac_fcb509ee",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5506
      },
      "writtenOn": "2016-02-02T04:09:12Z",
      "side": 1,
      "message": "\u003e Based on a prior discussion, Chandler C. doesn\u0027t like this.  And\n \u003e he\u0027s technically clearly correct.  This is not guaranteed to be\n \u003e safe in the presence of type-based alias analysis.  You are\n \u003e modifying a T through a pointer to atomic\u003cT\u003e, which is a different\n \u003e type.\n \u003e \n \u003e That said, we also do this in Android.\n \u003e \n \u003e In this context, I would probably prefer the intrinsics below, and\n \u003e only use this as a fallback. Copying Chandler on this CL is\n \u003e probably also a good idea.\n\nUnderstood. I\u0027ll follow up.\n\n \u003e Both seem a bit dangerous in that they don\u0027t check that T is\n \u003e sufficiently aligned for atomic\u003cT\u003e.  I believe this is commonly\n \u003e false for double or long long with 32-bit ABIs.\n\nRE2 needs only int and T*, so we might be able to dodge that bullet. :)",
      "parentUuid": "f465d6c4_955b537d",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 48
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_abb476ef",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T06:13:28Z",
      "side": 1,
      "message": "Is it possible to use an inline function with a static_assert to enforce either that restriction or the underlying alignment requirement?",
      "parentUuid": "314ea0ac_fcb509ee",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 48
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_9532732b",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T00:02:50Z",
      "side": 1,
      "message": "Delete this option?  This seems too broken to ever be useful.  At a minimum, you would need to cast to volatile, I think.  Bit even then several of the fences below are just wrong, and would need fixing.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 60
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "314ea0ac_dcb2cd03",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5506
      },
      "writtenOn": "2016-02-02T04:09:12Z",
      "side": 1,
      "message": "\u003e Delete this option?  This seems too broken to ever be useful.  At a\n \u003e minimum, you would need to cast to volatile, I think.  Bit even\n \u003e then several of the fences below are just wrong, and would need\n \u003e fixing.\n\nRight now, Windows folks fall into this \"old compiler\" category, but they probably have the only barrier that actually works! Most of my motivation for this change is to provide a decent solution for non-GCC/Clang users so that I can eventually remove the barriers.",
      "parentUuid": "f465d6c4_9532732b",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 60
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_ebc4ae6c",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T06:13:28Z",
      "side": 1,
      "message": "My preference would be  to either fix the broken branches, particularly aarch64, or have them  fail to compile.  That seems much safer than having them generate incorrect code.",
      "parentUuid": "314ea0ac_dcb2cd03",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 60
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_15990361",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T00:02:50Z",
      "side": 1,
      "message": "SFENCE on x86 is only useful for unusual memory mapping types and nontemporal accesses.  Unless this is for kernel code, this should use a no-op.",
      "range": {
        "startLine": 79,
        "startChar": 24,
        "endLine": 79,
        "endChar": 30
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_f57acfc1",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T00:02:50Z",
      "side": 1,
      "message": "This is just plain wrong in that it fails to provide LoadStore ordering, which is essential here.  Aarch64 should use release stores, not fences.",
      "range": {
        "startLine": 91,
        "startChar": 23,
        "endLine": 91,
        "endChar": 31
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_75e23fc1",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T00:02:50Z",
      "side": 1,
      "message": "Same problem as for aarch64.  Good thing we don\u0027t care.",
      "range": {
        "startLine": 97,
        "startChar": 24,
        "endLine": 97,
        "endChar": 27
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f465d6c4_35b287b8",
        "filename": "util/atomicops.h",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 7095
      },
      "writtenOn": "2016-02-02T00:02:50Z",
      "side": 1,
      "message": "Unlike the st case, this is almost OK. It should really prefer acquire loads, for both performance and subtle correctness issues.",
      "range": {
        "startLine": 181,
        "startChar": 24,
        "endLine": 181,
        "endChar": 30
      },
      "revId": "e74ea6ab821367b965a45c816adba8afdd865f1c",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa",
      "unresolved": false
    }
  ]
}