{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "405a554a_18cc71dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44612
      },
      "writtenOn": "2024-03-15T22:38:26Z",
      "side": 1,
      "message": "Can you please clarify what this change hopes to accomplish? From the change description I cannot tell why we are changing the comment? It looks like a partial sentence to me, did something get cut off?\n\nAre you trying to say that per the documentation, the header should match the regex\n\n```\n^// Code generated .* DO NOT EDIT\\.$\n```\n\nwhich is published at that URL?\n\nAlso, this documentation says \"should\" not \"must\". What are the consequences for not merging this?",
      "revId": "554e02268c100cd84a2f7b701b6db5bd0419b9e2",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac47bd29_0e680871",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3335628
      },
      "writtenOn": "2024-03-16T16:10:13Z",
      "side": 1,
      "message": "Yes, you are correct. I updated the CL message to make it more clear.\n\nThis change implements the convention for the generated code header agreed upon https://go.dev/s/generatedcode. The convention was reached in 2018 through the proposal https://go.dev/issues/13560. By now, most of the generated Go code uses a comment that matches the regexp `^// Code generated .* DO NOT EDIT\\.$`.\n\nMost of the source files in the Go language repo adhere to this convention for consistency. E.g., see these CLs: [runtime/internal/sys: use standard generated code header](https://go-review.googlesource.com/c/go/+/60250), [cmd/dist: use standard generated code header](https://go-review.googlesource.com/c/go/+/61010), [cmd/cgo: use standard generated code comment](https://go-review.googlesource.com/c/go/+/115035).\n\n`mksyntaxgo` is used to generate the file https://go.googlesource.com/go/+/refs/tags/go1.22.1/src/regexp/syntax/doc.go and should follow comment rules for generated files. Because a lot of tools rely on this fact.\n\nNot merging this CL won\u0027t break the code. It is more about maintaining standards, ensuring consistency, and improving developer experience.",
      "parentUuid": "405a554a_18cc71dc",
      "revId": "554e02268c100cd84a2f7b701b6db5bd0419b9e2",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f07f19e_1b850903",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44612
      },
      "writtenOn": "2024-03-16T20:25:33Z",
      "side": 1,
      "message": "\u003e Because a lot of tools rely on this fact\n\nWhat tools, and to what effect? What happens if you follow this convention? What happens if you don\u0027t? Unfortunately the links you\u0027ve shared are \"we should do this!\" links, not \"here\u0027s a problem we are trying to solve\".\n\nI don\u0027t object to this change, but I do not understand why it\u0027s worth going out of the way to do. It sounds like the answer is \"nothing, but it\u0027s the go convention, so follow the convention\"? I would personally feel happier about the situation if there was a problem that was being solved.",
      "parentUuid": "ac47bd29_0e680871",
      "revId": "554e02268c100cd84a2f7b701b6db5bd0419b9e2",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2531ddec_039d69d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3335628
      },
      "writtenOn": "2024-03-16T20:48:55Z",
      "side": 1,
      "message": "Indeed, following the convention won\u0027t change or improve the functionality of the code we write. However, one of the reasons we are urged to follow this convention is documentation and readability, which dramatically improves code health, especially in large-scale projects like Go.\n\nWhen someone tries to edit a file with `// Code generated by ... DO NOT EDIT.` comment, [VSCode](https://github.com/golang/vscode-go) or [GoLand](https://www.jetbrains.com/go/) displays a warning, as their changes will be lost when the source is regenerated.\n\nSome tools like `go vet`, golangci-lint, SonarQube, GitHub, etc., use this standard comment to skip or treat generated files differently. For instance, \u0027go vet\u0027 and other linters would suppress warnings for the generated code which is not intended to be edited by hand, avoiding unnecessary warning pollutions.\n\nSo, while it might appear as \"nothing, but it\u0027s the go convention, so follow the convention\", there are longevity and tooling benefits to preserving this practice. Not adhering to this could lead to unneeded confusion or a change to files that should be left as is, degrading the codebase\u0027s health.",
      "parentUuid": "5f07f19e_1b850903",
      "revId": "554e02268c100cd84a2f7b701b6db5bd0419b9e2",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bd89d2d_5871dd72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44612
      },
      "writtenOn": "2024-03-16T20:56:28Z",
      "side": 1,
      "message": "codehealth is not one dimensional, and I don\u0027t believe re2 uses most of these tools, so I do not believe any of the concerns you are raising here, or the benefits to codehealth are actually the case. But as I said before, I do not object to this change, but I definitely (highly) question the level of effort compared to the benefit of doing so.\n\nIn the future I recommend\na) Make the change descriptions (a lot) more informative, so we don\u0027t have to have a back-and-forth on the code review\nb) Focus on what problems are being solved. Pure codehealth changes, even ones that are just comments/documentation/etc need to have a clear benefit and the project team should be on board with these changes, preferably enthusiastically. See also the point in (a)\nc) Checking to see if your changes apply more broadly in the repository. From looking at https://github.com/search?q\u003drepo%3Agoogle%2Fre2%20%22generated%20by%22\u0026type\u003dcode there is no consistent generated-by header, but a few different generators. Consistency between them would probably be much more valuable than per-language best-practices.",
      "parentUuid": "2531ddec_039d69d2",
      "revId": "554e02268c100cd84a2f7b701b6db5bd0419b9e2",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43f27382_178c6543",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5506
      },
      "writtenOn": "2024-03-17T08:58:26Z",
      "side": 1,
      "message": "I wonder whether it might be worth moving `mksyntaxgo` out of RE2 mostly so that Go folks can own it, but that\u0027s a separate discussion for a separate forum. Thanks for the questions, Alex, and thanks for the answers, Oleksandr.",
      "parentUuid": "9bd89d2d_5871dd72",
      "revId": "554e02268c100cd84a2f7b701b6db5bd0419b9e2",
      "serverId": "c958e1eb-c711-3e17-a1d0-c94d35b2e5aa"
    }
  ]
}